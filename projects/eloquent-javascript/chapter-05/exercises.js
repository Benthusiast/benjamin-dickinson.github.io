// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  let retArr = [];
  for(let i = 0; i < array.length; i++){
    for(let j = 0; j < array[i].length; j++){
      retArr = retArr.concat(array[i][j]);
    }
  }
  return retArr;
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(startVal, stopCon, updateFunc, bodyFunc) {
  for(let i = startVal; stopCon(i); i = updateFunc(i)){
    bodyFunc(i);
  }
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, func) {
  for(let i = 0; i < array.length; i++){
    if(!func(array[i], i, array)){
        return false;
    }
  }
  return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  //need to keep track of the strings in the input string
  let ltr = [];
  let rtl = [];

  for(let i = 0 ; i < string.length; i++){
    let scriptName = characterScript(string.charCodeAt(i));

    if(scriptName !== null){
      if(scriptName.direction === "ltr"){
        ltr.push(scriptName);
      } else {
       rtl.push(scriptName);
      }
    } 
  }
  if(ltr.length > rtl.length){
    return "ltr";
  } else {
    return "rtl";
  }
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
